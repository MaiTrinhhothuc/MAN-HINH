/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ILI9225.h"
#include "DHT.h"
#include "stdio.h"
#include "stdint.h"
#include <string.h>
#include "RTC.h"
#include "font.h"
#include "testing.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c2;

SPI_HandleTypeDef hspi2;

/* USER CODE BEGIN PV */
uint8_t second_present, min_present, hour_present, date_present, month_present, year_present;
uint8_t second_temp, min_temp, hour_temp, date_temp, month_temp, year_temp;
char temperature_string[100];
char humidity_string[100];
float Temperature;
float Humidity;
char str1[100];

char str2[100];

DHT_DataTypedef DHT11_Data;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
DHT_DataTypedef DHT11;
DateTime datetime;

void Read_DataDHT(void)
{
	DHT_GetData(&DHT11_Data);
	Temperature = DHT11_Data.Temperature;
	Humidity = DHT11_Data.Humidity;
}

//typedef struct {
//     const uint32_t *data;
//     uint16_t width;
//     uint16_t height;
//     uint8_t dataSize;
//     } tImage;

//
//static const uint32_t image_data_quan[1855] = {
//    0x24a824c8, 0x24a824c8, 0x454c55ad, 0x55ae7e12, 0xefdce7bc, 0x7df2558e, 0x4d8d454a, 0x24c824a8, 0x24a80c47, 0x76118633, 0x14271cc7, 0x24c82c88, 0x24a824a8, 0x24a81cc8, 0x34e94d2b, 0x24a81ca7, 0x1cc824a8, 0x24a824c8, 0x1cc81ca8, 0x9694f7fe, 0x75d11c87, 0x1ce824a8, 0x2cc94d6c, 0x8e32e77c, 0xffffffdf, 0xffdea6b6, 0x658e352a, 0x24a824a8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c91c88, 0x5d4defdd, 0xffdf0000,
//    0x24c824a8, 0x24c824a8, 0x24a824c9, 0x452b75d0, 0xaeb6aeb6, 0x65af3d2b, 0x24a824c7, 0x24c81cc8, 0x3d0b9e74, 0xe79def9e, 0x9e543d0a, 0x1cc724a9, 0x24c824c8, 0x24a80ce8, 0x3d2b65ae, 0x14c81ca7, 0x24e824a8, 0x24c824a7, 0x1ce81c88, 0x85f2dfbc, 0x5d2d1ca7, 0x1cc824a8, 0x24c84d4c, 0x7db1d75c, 0xffffffff, 0xffdfaeb7, 0x6d6f34ea, 0x24c824a8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24a92ca8, 0x0c867db1, 0xffff0000,
//    0x24c824c8, 0x24c824e9, 0x24c82ca8, 0x452b65cf, 0x658f6d6f, 0x5dee3d2b, 0x24a824c8, 0x24c81cc8, 0x24c8b6b6, 0xffffffff, 0xb6f82caa, 0x1cc824c9, 0x24a73d6b, 0x5dcd24a8, 0x4d2d6e11, 0x1ca94d0b, 0x5dce1cc9, 0x24c92ca8, 0x1ce824a8, 0x34ca3ceb, 0x2cea1cc8, 0x24c824c8, 0x1cc81ca8, 0x3cebb718, 0xffdeffff, 0xef7c6590, 0x1cc91ca7, 0x24c824c9, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24a92ca8, 0x0cc76db0, 0xffff0000,
//    0x24c824c8, 0x24c824c8, 0x1cc834e9, 0x55ad3d0a, 0x4d8d4d4d, 0x3d0a55cd, 0x2cc924c8, 0x24c824c8, 0x14a6656f, 0xffffffff, 0x65d01467, 0x2ca824c7, 0x24c824a8, 0x65ce7df0, 0x86328633, 0x76117e10, 0x3d0a24a8, 0x24c92ca9, 0x24c824c8, 0x24a81cc7, 0x1cc724c9, 0x24c824c7, 0x24a72488, 0x558d8612, 0xa655ced8, 0x8e137652, 0x24c924c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c81ce8, 0x14a78e74, 0xc7190000,
//    0x24c824c8, 0x24c824c8, 0x1cc8352a, 0x34c924a8, 0x3d6b452b, 0x2c8734c9, 0x3d2b24a8, 0x2ca81ce9, 0x14a76daf, 0x75f275f0, 0x6def1ca7, 0x1ce824c7, 0x14e814a8, 0x452c8e52, 0x86327e32, 0x96736dcf, 0x14c81ca8, 0x24c824a8, 0x24a824c8, 0x24e824c7, 0x24c824a8, 0x24c81cc8, 0x1cc82cc8, 0x4dac2cc9, 0x4d8d85f1, 0x2cca452b, 0x452b24a8, 0x24c824c8, 0x24c824c8, 0x24c824a8, 0x24c824c8, 0x24c824c8, 0x2ca824c8, 0x24a854ec, 0x24c90000,
//    0x24e824e8, 0x24c824c8, 0x24c824a8, 0x24c81cc8, 0x354a3d0a, 0x24c724c8, 0x24c924c8, 0x24e824c8, 0x24c824e8, 0x14870cc7, 0x24e82cc9, 0x1ce82cc8, 0x44eb452c, 0x6df09633, 0x6dd185f2, 0x86128e53, 0x556d4d4c, 0x2cc824c8, 0x24c92cc8, 0x24c824c9, 0x24c824e8, 0x24e824e8, 0x24c824c8, 0x24a824a8, 0x2d0955ad, 0x1cc82ca8, 0x24c824c9, 0x24c924c8, 0x24c824c8, 0x24c82cc8, 0x24e824c8, 0x24e824c8, 0x24c82cc8, 0x24c82c88, 0x1cc80000,
//    0x2ca82cc8, 0x2cc824c8, 0x24c824c8, 0x24e824c8, 0x2ce82cc8, 0x24e824e8, 0x24c824e8, 0x24e824c8, 0x2cc824c8, 0x2ca824c8, 0x24c824c8, 0x24c824a8, 0x5d6c662f, 0x7e318e12, 0x76319eb5, 0x75b18e32, 0x76105e0e, 0x350924c8, 0x24c824c8, 0x24c824c9, 0x24c824e8, 0x24e824c8, 0x24c824a8, 0x24c824c8, 0x2cc82cc8, 0x24c82cc8, 0x1ce824c9, 0x24c824c8, 0x24c824c8, 0x24e824e8, 0x2ca82cc8, 0x24c824e8, 0x1ce824e8, 0x24c82ca8, 0x24c80000,
//    0x1d081d08, 0x2ca824e8, 0x24c824e8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24e824c8, 0x24e824c8, 0x24c824c8, 0x24e82cc8, 0x24c824a8, 0x5d4d9673, 0x7df17590, 0x863275f0, 0x34891cc8, 0x24e824c8, 0x24c824e8, 0x24e824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24e824c8, 0x24c824c8, 0x24c824c8, 0x24c824e8, 0x24c824c8, 0x24e824e8, 0x24c824c8, 0x2ca824e8, 0x1ce824e8, 0x2cc824c8, 0x24c824c8, 0x24e80000,
//    0x1d0824e9, 0x34a924e8, 0x24c824e8, 0x24e824e8, 0x24c824e8, 0x24e824e8, 0x24e824c8, 0x24e924c8, 0x24c824e8, 0x24e824c8, 0x24e824e8, 0x24c824c8, 0x25081ca8, 0x554d8632, 0x8e939674, 0x86526dcf, 0x34a924e8, 0x24e824c8, 0x24c824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24c824e8, 0x24e92ce8, 0x24e824e8, 0x24e824c8, 0x24e824c8, 0x24c82ce8, 0x24e82508, 0x2cc83c67, 0x2cc824e8, 0x24e824e9, 0x24c80000,
//    0x24e92cc9, 0x2ce92ce8, 0x24e82ce8, 0x24e824e8, 0x2ce824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x2ce824e8, 0x24e824e8, 0x2ce824e8, 0x24c7352a, 0x664f4d0b, 0x65cf7e11, 0x4d0c5dce, 0x4dcd24e9, 0x24e824c8, 0x24e82ce8, 0x2ce824e8, 0x24e824e8, 0x24e824e8, 0x24e82ce8, 0x2ce824e8, 0x24e82ce8, 0x2ce824e8, 0x2ce82ce8, 0x2ce824e8, 0x24e824e8, 0x24e82508, 0x25083488, 0xa246a226, 0x34a82508, 0x24e82ce8, 0x24e80000,
//    0x15681d28, 0x24e82508, 0x24e824e8, 0x2ce824e8, 0x24e824e8, 0x2ce82ce8, 0x24e82ce8, 0x24e824e8, 0x24e824e8, 0x24e824e9, 0x24e82ce8, 0x24e824e8, 0x2cc83d2a, 0x3d2a24a7, 0x3d4b65cf, 0x2c892cc9, 0x458b24e8, 0x24e82ce8, 0x24e824e8, 0x24e824e8, 0x24e82ce8, 0x24e824e8, 0x24e82ce8, 0x24e824e8, 0x24e82ce8, 0x2ce824e8, 0x24e82ce8, 0x24e82ce8, 0x24e824e8, 0x2ce824e8, 0x25082cc8, 0xc965c945, 0x34a824e8, 0x24e824e8, 0x24e80000,
//    0x73874c07, 0x34a824e8, 0x2cc82ce8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x2ce824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24e824e8, 0x24e82ce8, 0x24c82508, 0x3d4a5dcd, 0x24c82508, 0x24c82cc8, 0x24e824e8, 0x24e82ce8, 0x24e824e8, 0x24e82ce8, 0x24e824e8, 0x24e824e8, 0x24e82ce8, 0x24e82cc8, 0x2ce824e8, 0x24e82ce8, 0x24e824e8, 0x24e82ce8, 0x24e824e8, 0x2cc82ce8, 0x6b877367, 0x34c82508, 0x2ce82cc8, 0x24e80000,
//    0xe8c4c185, 0x44682508, 0x2ce824e8, 0x2ce824e8, 0x24e82ce8, 0x34c82508, 0x2ce82ce8, 0x24e82ce8, 0x2d082508, 0x2ce82ce7, 0x2ce924e8, 0x24e82ce8, 0x25092ce8, 0x24e824e8, 0x2ce82ce9, 0x24e82d08, 0x2d082ce8, 0x2ce824e9, 0x2ce92508, 0x24e824e8, 0x2ce824e8, 0x2ce82ce8, 0x25082cc8, 0x25082508, 0x25083c88, 0x2cc82508, 0x25082508, 0x2ce82ce8, 0x2ce824e8, 0x2d082ce8, 0x2d082508, 0x1d281d28, 0x2ce82508, 0x2ce82ce8, 0x25080000,
//    0xd9255407, 0x1d2824e8, 0x2d082ce8, 0x24e82ce8, 0x25082d08, 0x2d0824e8, 0x2ce82ce8, 0x2d082d08, 0x2d082ce8, 0x2d082ce8, 0x2ce824e8, 0x25082507, 0x2ce82ce8, 0x2ce92508, 0x2ce824e8, 0x24e82ce8, 0x25082ce8, 0x24e82ce9, 0x2d0824e8, 0x2ce92ce8, 0x2ce824e8, 0x2d082508, 0x25082cc8, 0x3c882ce8, 0x2ce84467, 0x34a82508, 0x448834a8, 0x24e82ce8, 0x2ce82d08, 0x2ce82ce8, 0x2ce82d08, 0x2ce82ce8, 0x2ce824e8, 0x2ce824e8, 0x24e80000,
//    0xb9e51d28, 0x24e82d08, 0x2ce824e8, 0x2ce824e8, 0x24e82ce8, 0x2ce82d08, 0x25082ce8, 0x2d082d08, 0x2ce824e8, 0x2ce82509, 0x25082ce8, 0x2ce824e8, 0x2d072ce8, 0x2ce92ce9, 0x25082d08, 0x2d0824e8, 0x25082d08, 0x24e82ce8, 0x25082d08, 0x34c82d08, 0x24e82ce8, 0x2ce824e8, 0x2ce82ce8, 0x44684c47, 0x44884c27, 0x4c473c88, 0x5be72508, 0x25082d08, 0x24e82ce8, 0x2ce82d08, 0x24e82ce8, 0x2ce824e8, 0x2d082ce8, 0x2d0824e8, 0x24e80000,
//    0xc1852ce8, 0x2ce82d09, 0x2d082d08, 0x2ce82d08, 0x2ce82ce8, 0x2ce82d08, 0x25282508, 0x2d082ce8, 0x2d082d08, 0x2ce82ce9, 0x25281cc7, 0x556c5d8d, 0x1cc62508, 0x2ce92ce9, 0x2ce82d08, 0x2ce82d08, 0x2d082ce8, 0x2d082d07, 0x25072508, 0x252824e8, 0x2d082d08, 0x2d082ce8, 0x25082528, 0x25085427, 0x5be75be7, 0x6bc75be7, 0x34c82528, 0x2d082508, 0x25082d08, 0x2ce82d08, 0x2d082d08, 0x2d082d08, 0x2ce82d09, 0x2ce82d08, 0x2d080000,
//    0x8ac63ca8, 0x25292508, 0x2d082d09, 0x2d082d08, 0x2d091d28, 0x25084488, 0x5be73508, 0x2d082d09, 0x2d082d08, 0x2d093508, 0x254944eb, 0xb6d7c719, 0x450b252a, 0x25082ce8, 0x2d082d08, 0x2d092d09, 0x2d082d08, 0x2d082507, 0x550c5d6e, 0x25072d08, 0x2d092d08, 0x2d082d09, 0x34e82508, 0x3cc84c47, 0x7b67aa46, 0x8ac64447, 0x3ca834e8, 0x2ce82d09, 0x2d092d08, 0x2ce82d08, 0x2d092d08, 0x2d082d08, 0x2d082d08, 0x2d082d08, 0x2d090000,
//    0x254834e8, 0x2d092d09, 0x2d092d09, 0x2d092d09, 0x2d092ce8, 0x1d4892c6, 0xe0e563c7, 0x25292d09, 0x2d092d29, 0x2d282527, 0x3d2bcf7a, 0xffffffff, 0xd79b454c, 0x25272d08, 0x2d092d09, 0x2d092d28, 0x2d092d09, 0x2ce82d4a, 0xc73ae79c, 0x4d8b24e8, 0x2d092d09, 0x2d292d29, 0x2ce84c67, 0x44475c07, 0x8ae6e8c4, 0xc1c563c7, 0x4c474468, 0x34c82ce9, 0x2d292d09, 0x2d092d09, 0x2d292d09, 0x2d292d09, 0x2d092d09, 0x35292d29, 0x2ce80000,
//    0x2d282d08, 0x2d092d28, 0x2d292d09, 0x2d092d28, 0x2d0934e9, 0x25488307, 0xe0e55c07, 0x25492d29, 0x2d282d09, 0x2d092d28, 0x24e885b1, 0xffffffff, 0x85f21cc8, 0x2d282d28, 0x2d082d28, 0x2d092d09, 0x2d292d09, 0x2d081d08, 0xb6f7d79a, 0x35492d08, 0x2d082d09, 0x2d092d28, 0x2d083cc8, 0x3ca84c68, 0x8b06b9e5, 0x92a663c7, 0x54483ce8, 0x2d092d09, 0x2d092d09, 0x2d292d09, 0x2d282d29, 0x2d083508, 0x2d092ce8, 0x3d6a3d6a, 0x2ce80000,
//    0x2d082d08, 0x2d282d09, 0x2d082d28, 0x2d092d08, 0x2d082d29, 0x2d2944a8, 0x44872ce8, 0x2d282d09, 0x2d082d09, 0x2d082d08, 0x1d076df0, 0xcf7ac77a, 0x7e311d08, 0x2d082d09, 0x2d282d28, 0x2d292d08, 0x2d082d09, 0x2d282d28, 0x4d0c4d0c, 0x35282d08, 0x2d082d09, 0x2d092d08, 0x2d082d28, 0x2d085c28, 0x6bc86ba7, 0x6ba75be7, 0x3ce82548, 0x2d282d08, 0x2d082d08, 0x2d082d08, 0x2d292d08, 0x2d083d8a, 0x356a2d09, 0x458b458b, 0x2d080000,
//    0x2d092d28, 0x2d082d28, 0x2d082d09, 0x2d282d08, 0x2d083508, 0x2d282548, 0x2d282d08, 0x2d082d28, 0x2d082d08, 0x2d092d29, 0x2d08458b, 0x3ceb352b, 0x4d8c2d08, 0x2d092d09, 0x2d292d08, 0x2d082d08, 0x2d092d28, 0x252934e7, 0x25081d29, 0x35082d09, 0x2d082d28, 0x2d082d08, 0x2d082d28, 0x3cc85c27, 0x3cc84c47, 0x5c284487, 0x4c682d28, 0x2d092d09, 0x2d282d08, 0x2d082d08, 0x2d282d29, 0x2d282d29, 0x5e0d458c, 0x55ad55ad, 0x4d6b0000,
//    0x2d082d08, 0x2d282d09, 0x2d082d29, 0x2d082d09, 0x2d282d08, 0x35082528, 0x2d282d08, 0x2d082d29, 0x2d092d08, 0x2d092d28, 0x2d282ce8, 0x2d092528, 0x24e82d28, 0x2d0834e9, 0x2d082d09, 0x35292d08, 0x2d082d09, 0x35092d28, 0x2d482528, 0x2d082d08, 0x2d082d28, 0x2d282d08, 0x2d082d28, 0x4c8834e8, 0x35084467, 0x44882d08, 0x44683ce8, 0x2d292d08, 0x2d282d08, 0x2d282d08, 0x2d282d08, 0x2d283509, 0x4d4a662f, 0x76117df0, 0x6e0f0000,
//    0x2d082d09, 0x2d082d09, 0x2d082d08, 0x2d082d08, 0x2d282d08, 0x34e82d08, 0x35082d28, 0x2d082d08, 0x2d082d08, 0x2d282d28, 0x2d082d08, 0x2d082d27, 0x2d082d08, 0x252834e9, 0x2d082d08, 0x2d082d08, 0x2d282d08, 0x2d082528, 0x2d082d08, 0x2d282d08, 0x2d082d08, 0x2d082d08, 0x25283ce8, 0x35082d28, 0x2d283ca8, 0x2d082528, 0x2d483508, 0x2d082d08, 0x2d082d29, 0x2d082d28, 0x2d282d08, 0x35093d2a, 0x558b6e10, 0xbf38c738, 0x76300000,
//    0x2d492d09, 0x2d082d28, 0x2d082d08, 0x2d282d08, 0x2d082d08, 0x25282d28, 0x35082d28, 0x2d082d08, 0x2d082d08, 0x2d282d08, 0x2d082d29, 0x25282d08, 0x34e93508, 0x25483509, 0x3d693528, 0x2d282d28, 0x2d282d08, 0x25272d09, 0x35092d08, 0x2d282d08, 0x2d082d08, 0x2d082d28, 0x2d082d08, 0x25282d28, 0x2d2834e8, 0x2d083508, 0x35282d28, 0x35282d08, 0x2d082d08, 0x2d082d28, 0x2d083529, 0x458b55ed, 0x5dee7e52, 0xe7bcf7bc, 0x86520000,
//    0x9e94352a, 0x25072d08, 0x2d282d29, 0x2d092d28, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d082d28, 0x2d282d08, 0x2d282d08, 0x2d292d08, 0x35082508, 0x25283509, 0x660e2d48, 0x25682d09, 0x25292d09, 0x2d282d28, 0x2d282d08, 0x2d082d28, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d082d28, 0x2d282d28, 0x2d07458b, 0x456a2d08, 0x2d292d28, 0x2d292d08, 0x2d082d08, 0x4d4b7610, 0xa6f6aed5, 0x76100000,
//    0xffdfa6b5, 0x5dcc3509, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d283528, 0x2d283528, 0x2d282d28, 0x2d282d28, 0x2d292d28, 0x2d282d28, 0x2d282d28, 0x35695dcd, 0x2d09350a, 0x86113d2a, 0x34c85dac, 0x35692d28, 0x35282d28, 0x2d282d29, 0x35282d28, 0x2d282d28, 0x2d282d28, 0x2d283508, 0x2d282d28, 0x2d282d28, 0x2d282d28, 0x2d282d09, 0x24c8b695, 0x967324e9, 0x2d092d28, 0x2d282d29, 0x2d282d08, 0x4d8c660f, 0x6dcf6dcf, 0x660f0000,
//    0xffffffff, 0x86522547, 0x2d292d28, 0x35292d28, 0x35292d29, 0x2d293529, 0x2d292d29, 0x2d293529, 0x2d282d29, 0x35283529, 0x35292d28, 0x2d292d49, 0x25296e0f, 0x65ef660f, 0x8e336df0, 0x65ce6e0e, 0x35282d47, 0x35292d29, 0x2d292d29, 0x2d282d29, 0x2d292d29, 0x35292d28, 0x2d293529, 0x2d292d28, 0x2d292d29, 0x2d282d28, 0x2d0845ab, 0xbf38f7fe, 0xf7beb717, 0x45ab2d08, 0x35292d28, 0x2d08356a, 0x560d3d4a, 0x55ac5dcc, 0x3d4a0000,
//    0xffffd77b, 0x2ce92d29, 0x35293529, 0x2d283529, 0x35293529, 0x35292d49, 0x35293529, 0x35293529, 0x35293529, 0x2d293529, 0x35293549, 0x2d282d29, 0x25283d2a, 0x7e519ed3, 0x8eb39eb4, 0x7e71356b, 0x25283528, 0x2d493529, 0x35482d29, 0x35292d28, 0x35292d29, 0x35292d29, 0x2d492d29, 0x2d493529, 0x35483528, 0x35292d29, 0x2d282d08, 0xae96ffff, 0xffff9694, 0x2d083529, 0x2d292d28, 0x2d283d8a, 0x35492d09, 0x458b45ab, 0x2d280000,
//    0x9632af17, 0x454c2d27, 0x35293529, 0x35292d48, 0x2d293529, 0x35483548, 0x2d283529, 0x35292d28, 0x2d283549, 0x2d293529, 0x35293549, 0x35292d28, 0x3d094d6c, 0x96b38df1, 0x75d07e11, 0x96b445ad, 0x35093508, 0x2d293529, 0x35292d49, 0x35293548, 0x35292d29, 0x35293529, 0x35492d29, 0x35293529, 0x35292d49, 0x2d493529, 0x354824e7, 0x7e11effe, 0xffde75cf, 0x25273528, 0x35293529, 0x2d282d29, 0x35292d29, 0x3d8a458a, 0x2d480000,
//    0x25073d29, 0x35492d68, 0x2d483529, 0x35293548, 0x35293548, 0x2d293529, 0x35293529, 0x2d292d29, 0x35292d29, 0x35492d29, 0x35292d28, 0x2d0845ab, 0x76718673, 0x967485f1, 0xb7787e52, 0xa6328e72, 0x76704dcb, 0x2d293529, 0x35282d29, 0x35492d29, 0x35293548, 0x35283528, 0x2d283528, 0x35293529, 0x35292d29, 0x35293529, 0x35493508, 0x660f5daf, 0x65af660d, 0x2d483528, 0x35292d29, 0x2d292d29, 0x35293529, 0x35493d49, 0x35280000,
//    0x35492d29, 0x35493529, 0x35293549, 0x35483548, 0x35493548, 0x35493529, 0x35293548, 0x35493549, 0x35493549, 0x35293549, 0x35493549, 0x35493549, 0x356955cc, 0x9e948df3, 0x6e507631, 0x9ed55dcd, 0x3d8a3569, 0x2d493529, 0x35493549, 0x35483549, 0x35493529, 0x35292d29, 0x45ab3529, 0x35292d49, 0x2d493529, 0x35293549, 0x35493529, 0x2d282d28, 0x2d283528, 0x35483529, 0x35492d49, 0x35493549, 0x35492d49, 0x35493549, 0x2d690000,
//    0x35493549, 0x35282d49, 0x35493549, 0x35492d48, 0x35293548, 0x356b3d6a, 0x35473529, 0x35483549, 0x35293549, 0x35483549, 0x35493549, 0x35492d49, 0x2548452a, 0x86729695, 0x8e72a6b3, 0x86713d6b, 0x2d283528, 0x35483549, 0x35493549, 0x35493529, 0x2d492d68, 0x2568356a, 0xbf39456b, 0x1d872588, 0x35493549, 0x35492d49, 0x35482d49, 0x35483549, 0x35493529, 0x35493549, 0x2d482d48, 0x35493549, 0x35493548, 0x35493528, 0x35490000,
//    0x35493549, 0x35482d48, 0x2d692d49, 0x3548356a, 0x354b3549, 0x459045ae, 0x35483d6c, 0x35493549, 0x35483549, 0x35482d48, 0x2d483549, 0x2d482d48, 0x2d28660d, 0x6e507631, 0x8e517e50, 0x7e106e0e, 0x35292d68, 0x35483528, 0x35482d49, 0x2d493549, 0x3d092d28, 0x24e87df0, 0xffff8653, 0x2ce83508, 0x35292d49, 0x2d493549, 0x35493549, 0x35483549, 0x35493549, 0x35492d48, 0x35493549, 0x35493549, 0x35493549, 0x35493528, 0x35090000,
//    0x35493549, 0x2d493569, 0x2d482d49, 0x3548354a, 0x4def45b1, 0x55d655f5, 0x45af4dcf, 0x2d293549, 0x2d693548, 0x35483569, 0x35492d69, 0x2d492d48, 0x3d6a662e, 0x3549354a, 0x7e713d6a, 0x35295e4e, 0x456a2d48, 0x35692d49, 0x2d483549, 0x35493549, 0x35498691, 0xcf39efbe, 0xfffeefde, 0xcf3b96b4, 0x35692d48, 0x35693549, 0x35493549, 0x2d693549, 0x2d693549, 0x2d692d49, 0x35493569, 0x2d483549, 0x2d693549, 0x2d683549, 0x4d4c0000,
//    0x2d692d49, 0x2d692d48, 0x2d692d69, 0x2d683549, 0x458e665a, 0x6e7d6e7c, 0x66593d8d, 0x35482d49, 0x2d482d69, 0x2d692d48, 0x2d693569, 0x2d692d69, 0x35493529, 0x2d483569, 0x664f3d69, 0x25682d69, 0x35493548, 0x35492d48, 0x2d682d68, 0x35483549, 0x1d686dee, 0xf7ddffdf, 0xf7ffffdf, 0xffff7e31, 0x2d482d69, 0x2d692d49, 0x2d693549, 0x2d693548, 0x35492d69, 0x2d693569, 0x2d692d69, 0x2d682d69, 0x2d693548, 0x2d682528, 0x7e510000,
//    0x2d692d68, 0x2d492d69, 0x2d492d49, 0x35693d8b, 0x4df26e7d, 0x6e9f6e9d, 0x665d45cf, 0x35893569, 0x2d692d69, 0x2d692d69, 0x2d692d48, 0x2d692d69, 0x2d692d69, 0x35683548, 0x4d8c3589, 0x2d693d49, 0x35492568, 0x2d693549, 0x35682d69, 0x2d692d69, 0x35682d08, 0x7e32f7ff, 0xffdfffff, 0x9e942507, 0x35482d69, 0x2d693569, 0x2d692d69, 0x2d693548, 0x2d682d69, 0x2d693568, 0x2d692d49, 0x2d492d69, 0x2d693548, 0x2d682d49, 0x5d8d0000,
//    0x2d692d69, 0x2d492d68, 0x2d682d69, 0x356b45b0, 0x55f76e7d, 0x6e7e6e9d, 0x6e7d55f7, 0x45b0354b, 0x35483568, 0x2d692d69, 0x35692d69, 0x2d492d68, 0x35493549, 0x35682d88, 0x35292d48, 0x2d682d49, 0x2d692d69, 0x2d492d69, 0x2d682d49, 0x2d492d69, 0x2d682527, 0x7df1ffff, 0xffdfffff, 0x96932d28, 0x35692d68, 0x35492d49, 0x2d682d68, 0x2d693d48, 0x35482569, 0x35882d68, 0x2d682d69, 0x2d693569, 0x2d683569, 0x35693569, 0x35690000,
//    0x2d693569, 0x35693568, 0x35693568, 0x35673548, 0x45af6e5d, 0x6e7f769f, 0x663b3dac, 0x354a3548, 0x35683569, 0x2d693569, 0x2d693569, 0x35693569, 0x35692d88, 0x35693549, 0x25883569, 0x35693569, 0x35692d69, 0x35692d69, 0x2d693569, 0x35693569, 0x2d682d28, 0x8ed3bf58, 0x5dcfbef8, 0xaf153528, 0x2d893568, 0x35692d69, 0x35693569, 0x3548456c, 0x3d2a2d69, 0x35693568, 0x2d682d69, 0x35693568, 0x35893569, 0x35693569, 0x35690000,
//    0x35693569, 0x35683569, 0x35693569, 0x3568354a, 0x4dd05615, 0x66595e38, 0x5e1745cd, 0x35673568, 0x35693569, 0x35693569, 0x35693569, 0x35693568, 0x25077611, 0x5ded2526, 0x2d693569, 0x35692d89, 0x35893569, 0x35693589, 0x35693569, 0x35893568, 0x35693549, 0x55cc452a, 0x25483cea, 0x4dec3569, 0x35493569, 0x35693569, 0x35892d68, 0x5dccc759, 0x8eb43569, 0x35693569, 0x35693569, 0x35693569, 0x2d493569, 0x35693569, 0x35690000,
//    0x35693569, 0x35693569, 0x2d283569, 0x35683d8b, 0x45cf356a, 0x4dd14dcf, 0x3d6b45ce, 0x35693569, 0x35693568, 0x35893569, 0x35693569, 0x35493daa, 0x65cfd77b, 0xbf395dad, 0x3d8a3589, 0x35893589, 0x35693569, 0x35693569, 0x35693569, 0x35693568, 0x35893569, 0x35483568, 0x35873568, 0x25882d89, 0x3d493569, 0x35893589, 0x35682d69, 0x5dcfffff, 0xbef72d68, 0x2d693569, 0x35693589, 0x35892d48, 0x24c83569, 0x35893589, 0x35890000,
//    0x35883569, 0x3d8a2ce8, 0x24c73569, 0x35883588, 0x35693569, 0x45ad3d8d, 0x35863569, 0x356a3589, 0x35893589, 0x35693569, 0x35893569, 0x35494dec, 0xdf9bffff, 0xffdfcf79, 0x3d8a3568, 0x35693589, 0x35893569, 0x35693569, 0x35893589, 0x35693569, 0x2d893569, 0x35692d89, 0x2d893d68, 0x35893589, 0x2d893549, 0x35693589, 0x35892d69, 0x456b8610, 0x6dce3549, 0x35683589, 0x35883569, 0x3d692d09, 0x1c882d08, 0x35893589, 0x35690000,
//    0x35683d8a, 0x2d2924a7, 0x24a83549, 0x35883569, 0x356a3568, 0x358a3569, 0x356a3589, 0x35893588, 0x35883589, 0x35492d08, 0x35693589, 0x35892d28, 0x8652ffff, 0xffff65ef, 0x25683588, 0x35693588, 0x35893549, 0x2d083569, 0x35893589, 0x35893569, 0x2da93588, 0x35693589, 0x35893589, 0x35893589, 0x354824e8, 0x3d693568, 0x35883588, 0x35882587, 0x2d883d6a, 0x35683589, 0x35883589, 0x35692cc8, 0x24881ca7, 0x2d273589, 0x35890000,
//    0x35692d28, 0x24c824a8, 0x24882ce8, 0x358835a8, 0x35893589, 0x35683589, 0x35693569, 0x35893588, 0x35883d89, 0x2d2924a8, 0x35493588, 0x35882d48, 0x8eb2b717, 0xcf396e2f, 0x2d673589, 0x35893568, 0x35892d29, 0x24c73569, 0x35893589, 0x35893589, 0x35893588, 0x35893589, 0x35893589, 0x35893d89, 0x2d081ca7, 0x2d293589, 0x2d883588, 0x35883589, 0x35893589, 0x35893588, 0x2d883589, 0x2d2824a8, 0x24a824a8, 0x24a824e8, 0x2d480000,
//    0x24e824a7, 0x24a824a8, 0x24a824a7, 0x2d483589, 0x35893589, 0x35893569, 0x35893589, 0x35893589, 0x3d893549, 0x24a81ca7, 0x24e83589, 0x35883589, 0x5d6c354a, 0x3d6b45ca, 0x3d483589, 0x35683589, 0x356924c8, 0x24a72d08, 0x35893588, 0x35893589, 0x35893589, 0x35893589, 0x35883589, 0x35893569, 0x24c824a8, 0x24c73549, 0x35893589, 0x35893588, 0x35893588, 0x35693d88, 0x3d883529, 0x1ca81cc9, 0x1cc824a8, 0x24a924a8, 0x24a80000,
//    0x24a824a8, 0x24a824a9, 0x24a724a8, 0x24a82d48, 0x35a83589, 0x35683588, 0x35893589, 0x358935aa, 0x354924c8, 0x24a824a8, 0x1ca82d2a, 0x358935a8, 0x35682da8, 0x2d882d88, 0x35883569, 0x35893d6a, 0x2ce824a8, 0x24a824a7, 0x2d483589, 0x35893589, 0x35893589, 0x35883568, 0x35893d89, 0x354924e8, 0x1ca824a8, 0x1ca824c8, 0x2d293589, 0x35893589, 0x35893589, 0x35882d89, 0x25282488, 0x24a824c8, 0x14a724a8, 0x24a824a8, 0x1cc80000,
//    0x1cc824a8, 0x24a924c9, 0x24c824a9, 0x24c824c8, 0x2d283568, 0x3d8935a9, 0x3d893d89, 0x3d892d29, 0x24c824c8, 0x24c824c8, 0x24c924a8, 0x2d283588, 0x35a935a8, 0x3d883588, 0x35893d89, 0x35692d09, 0x24c824c8, 0x1cc824a8, 0x24c82d29, 0x35893588, 0x35a93588, 0x35a935a9, 0x3d893569, 0x2ce824a8, 0x24a824a8, 0x24c824c8, 0x1ca824e8, 0x2d293549, 0x35693549, 0x2d2824c9, 0x1ca824c8, 0x1cc71c87, 0x5d8d2ca9, 0x1cc81ce8, 0x24c80000,
//    0x24a824a8, 0x24c924a8, 0x24a824a8, 0x24a824a8, 0x24a824c7, 0x2ce82d29, 0x2d082d28, 0x24c824a8, 0x24a924a8, 0x24c824a9, 0x24c824c8, 0x24a824e8, 0x2d483569, 0x358a3569, 0x35693508, 0x24c824a8, 0x24c824c8, 0x24a824c9, 0x24a824a8, 0x24e82d48, 0x3569358a, 0x35692d69, 0x2d2824c8, 0x1ca824c8, 0x24c824c8, 0x24a824c8, 0x24c824a8, 0x24a824a8, 0x24a71ca8, 0x24a82c88, 0x24c824c7, 0x2ca94ccc, 0xe77b654f, 0x1ca91ce8, 0x2c870000,
//    0x24a824c8, 0x1ca824a8, 0x24a81cc8, 0x24c824a8, 0x24a81ca8, 0x24a824a8, 0x24a91ca8, 0x1cc724a8, 0x1cc81ca7, 0x24a824a8, 0x24c824c8, 0x24a824a8, 0x1cc724c8, 0x24c91ce8, 0x1ce724a7, 0x24a824c8, 0x24a824c8, 0x2ca81cc8, 0x24c824c8, 0x24a724a7, 0x24e824c8, 0x24c824a7, 0x24c724a8, 0x24a824a8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24a824c8, 0x24c824a8, 0x24c824c7, 0x1ce71ca7, 0x7611e7bd, 0xffffefde, 0x96942488, 0x1ce80000,
//    0x24c724c8, 0x658e8e33, 0x34ca1cc8, 0x24c824a8, 0x24a824c8, 0x24a824c8, 0x24c824c9, 0x24a81cc7, 0x4cea4d2c, 0x14c724c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c81ce8, 0x24a82ca7, 0x150824e8, 0x24a824a8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24a914e7, 0x34a9d71b, 0xffffef9d, 0x450c1cc7, 0x24c80000,
//    0x14e724c9, 0xc739ffff, 0x556d1c87, 0x1cc824e8, 0x1cc824c8, 0x24c824c8, 0x24a824a8, 0x24c81c87, 0xa635aeb6, 0x14a824c8, 0x24c924c8, 0x24c824c7, 0x24c824c8, 0x24c824a8, 0x24c824c8, 0x24c824c8, 0x24c81cc8, 0x24e824c8, 0x24c82cc8, 0x44272ca8, 0x1cc824c8, 0x1ce824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824a8, 0x24c81cc7, 0x24a91ce8, 0x2467b6f8, 0xd77bcf7a, 0x34c924a8, 0x24c80000,
//    0x24c81c88, 0x7612aef7, 0x34ea24a8, 0x24e824c8, 0x24e824a8, 0x24a824c8, 0x24c824a7, 0x3d09bf18, 0xeffeeffe, 0xcf3a3d6c, 0x24a824c8, 0x24c724c8, 0x24c824c8, 0x24c824c8, 0x24a824c8, 0x24c824c8, 0x24a824a8, 0x24a824c8, 0x24c81d08, 0xaa266387, 0x15283488, 0x2ca824c8, 0x24a824c8, 0x24a824c8, 0x24c824a8, 0x24c824c8, 0x24a824a8, 0x24c824a8, 0x24c724c8, 0x24c824c8, 0x24a924c8, 0x2cc95d8e, 0x34895d6d, 0x350924c7, 0x1cc80000,
//    0x2cc824e8, 0x24e824a8, 0x24c91cc8, 0x24c82ca8, 0x2cc824c8, 0x24c824c8, 0x24c824c8, 0x1ca88612, 0xffffffff, 0x9e5524a8, 0x24a824a8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24a824c8, 0x24c824c8, 0x24c824a8, 0x24c824c8, 0x24e84c07, 0xf0a5aa05, 0x24e71d08, 0x24e81ce8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c9, 0x2cc824c8, 0x24c81c88, 0x1cc72468, 0x1cc72cc8, 0x24c80000,
//    0x2cc824e8, 0x24e824c8, 0x24e81ce7, 0x24c82cc8, 0x24c924c8, 0x24c824c8, 0x24c824c8, 0x1ca765ae, 0xf7ddefbd, 0x76111c87, 0x24c824c9, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x15286387, 0xc1c5d145, 0xe8c4e0e4, 0xc965aa26, 0x3c672cc8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24c824c8, 0x24e924e8, 0x24c824e9, 0x1ce82ca8, 0x24c80000
//};
//const tImage quan = { image_data_quan, 69, 53,
//    32 };

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI2_Init();
  MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
  lcd_init();
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
  draw_string(0, 50, COLOR_GREENYELLOW, 5, "HELLO");
  HAL_Delay(2500);
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
//  ILI9341_DrawImage(0, 0, WIDTH, HEIGHT, (const uint16_t*)test_img_240x240);

Read_DataDHT();
  // Cài đặt thời gian ban đầu
  datetime.second = 15;
  datetime.min = 44;
  datetime.hour = 12;
  datetime.day = 8;
  datetime.date = 58;
  datetime.month = 12;
  datetime.year = 23;
  RTC_WriteTime(&datetime);

// DrawImage(0, 0, WIDTH, HEIGHT, test_img_128x128);

  draw_string(20, 50, COLOR_GOLD, 5, "QMDP");
  HAL_Delay(2500);
  fill_rectangle(0, 0, 176, 220, COLOR_WHITE);
//  Read_DataDHT();
  draw_string(20, 20, COLOR_GOLD, 1, "TEMPERATURE");
  draw_string(20, 40, COLOR_GOLD, 1, "HUMIDITY");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 RTC_ReadTime(&datetime);
		  second_temp = datetime.second;
		  min_temp = datetime.min;
		  hour_temp = datetime.hour;
		  date_temp = datetime.date;
		  month_temp = datetime.month;
		  year_temp = datetime.year;
		  sprintf(str1, "Time %.2d:%.2d:%.2d", datetime.hour, datetime.min, datetime.second);


		  if(second_temp != second_present)
		  {
			  fill_rectangle(140, 100, 160, 110, COLOR_WHITE);
			  second_present = second_temp;
		  }
		  draw_string(40, 100, COLOR_BLACK, 1, str1);

		  if(min_temp != min_present)
		  	  {
		  		  fill_rectangle(110, 100, 130, 110, COLOR_WHITE);
		  		  min_present = min_temp;
		  	  }
		  draw_string(40, 100, COLOR_BLACK, 1, str1);

		  if(hour_temp != hour_present)
		 	  	  {
		 	  		  fill_rectangle(85, 100, 105, 110, COLOR_WHITE);
		 	  		  hour_present = hour_temp;
		 	  	  }
		  draw_string(40, 100, COLOR_BLACK, 1, str1);

		  sprintf(str2,"Date %.2d/%.2d/%.2d",datetime.date,datetime.month,datetime.year );
//	// để sprintf ở đây cho nó chính xác, date, month, year lâu lắm
//		  //để sprintf ở đây để convert, lệnh in lên LCD nằm trong thư viện của LCD
		  if(date_temp != date_present)
		  	 	  	  {
		  	 	  		  fill_rectangle(85, 115, 105, 135, COLOR_WHITE);
		  	 	  		  date_present = date_temp;
		  	 	  	  }
		  	  draw_string(40, 120, COLOR_BLACK, 1, str2);

		  	if(month_temp != month_present)
		  		 	  	  {
		  		 	  		  fill_rectangle(110, 115, 130, 135, COLOR_WHITE);
		  		 	  		  month_present = month_temp;
		  		 	  	  }
		  		  draw_string(40, 120, COLOR_BLACK, 1, str2);

		  		if(year_temp != year_present)
		  			 	  	  {
		  			 	  		  fill_rectangle(135, 115, 160, 135, COLOR_WHITE);
		  			 	  		  year_present = year_temp;
		  			 	  	  }
		  			  draw_string(40, 120, COLOR_BLACK, 1, str2);

		  		  	  Read_DataDHT();

	      snprintf(temperature_string, 7, "%.2f", Temperature);
	      snprintf(humidity_string, 7, "%.2f", Humidity);
	      fill_rectangle(150, 20, 220, 50, COLOR_WHITE);
//          Read_DataDHT();
//	      draw_string(20, 20, COLOR_GOLD, 1, "TEMPERATURE");
//	      draw_string(20, 40, COLOR_GOLD, 1, "HUMIDITY");

	      draw_string(150, 20, COLOR_BLUE, 1, temperature_string);
		  draw_string(150, 40, COLOR_BLUE, 1, humidity_string);
//	  	  DHT_GetData(&dht11);
//	  	  Read_DataDHT();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|CMD_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA7 CMD_Pin CS_Pin RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|CMD_Pin|CS_Pin|RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
